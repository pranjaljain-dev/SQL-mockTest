-- Basic Queries
-- 1.Retrieve the list of all dishes along with their restaurant names and prices.
select
    d.dishid,
    d.name as dish_name,
    d.price,
    r.name as restaurants
from
    dishes d
    join restaurants r on d.restaurantid = r.restaurantid;

-- 2.Find the average rating of all restaurants in New York.
select
    restaurantid,
    name,
    avg(rating) as average_rating
from
    restaurants
group by
    restaurantid
order by
    restaurantid;

-- Intermediate Queries
-- 3.Calculate the total revenue generated by each restaurant.
select
    r.restaurantid,
    r.name as restaurant_name,
    sum(o.totalamount) as revenue
from
    restaurants r
    join orders o on r.restaurantid = o.restaurantid
group by
    r.restaurantid
order by
    r.restaurantid;

-- 4.List the names of customers who have ordered more than once.
select
    c.customerid,
    c.name as customer_name
from
    orders o
    join customers c on o.customerid = c.customerid
group by
    c.customerid,
    customer_name
having
    count(o.orderid) > 1;

-- Advanced Queries with Window Functions
-- 5.Use a window function to rank restaurants based on their average customer ratings.
select
    restaurantid,
    name,
    rating,
    rank() over(
        order by
            avg(rating) desc
    ) as restaurant_rank
from
    restaurants
group by
    restaurantid;

-- 6.Calculate the cumulative total revenue for each restaurant.
select
    r.restaurantid,
    r.name as restaurant,
    sum(o.totalamount) over(
        partition by r.restaurantid
        order by
            o.orderdate
    ) as cumulative_rev
from
    restaurants r
    join orders o on r.restaurantid = o.restaurantid;

-- 7.Identify the top 2 most ordered dishes in each city using a window function.
with Top2 as (
    select
        d.name as dish_name,
        r.city,
        rank() over(
            partition by r.city
            order by
                count(o.orderid) desc
        ) as rank
    from
        orders o
        join restaurants r on o.restaurantid = r.restaurantid
        join dishes d on o.restaurantid = d.restaurantid
    group by
        dish_name,
        r.city
)
select
    dish_name,
    city,
    rank
from
    Top2
where
    rank <= 2;

-- 8.Find the average delivery time for each delivery person and rank them.
select
    deliveryperson,
    avg_time,
    rank() over(
        order by
            avg_time desc
    ) as rank
from
    (
        select
            deliveryperson,
            avg(deliverytime) avg_time
        from
            deliveries
        group by
            deliveryperson
    ) as t;

-- Aggregations and Grouping
-- 9.Retrieve the count of orders placed in each city.
select
    count(o.orderid) as count_of_orders,
    r.city
from
    orders o
    join restaurants r on o.restaurantid = r.restaurantid
group by
    r.city;

-- 10.Calculate the average order value for each cuisine type.
select
    r.cuisine,
    avg(o.totalamount) as order_value
from
    orders o
    join restaurants r on o.restaurantid = r.restaurantid
group by
    r.cuisine;

-- Filtering
-- 11.List all reviews with a rating below 4.
select
    reviewid,
    reviewtext,
    rating
from
    reviews
where
    rating < 4;

-- 12.Display all orders placed after October 1, 2023.
select
    orderid,
    orderdate
from
    orders
where
    orderdate > '2023-10-01';

-- Joins
-- 13.Write a query to display order details along with the restaurant and customer names.
select
    o.orderid,
    o.orderdate,
    o.totalamount,
    r.name as restaurant_name,
    c.name as customer_name
from
    orders o
    join restaurants r on o.restaurantid = r.restaurantid
    join customers c on o.customerid = c.customerid;

-- 14.Show all dishes ordered by each customer.
select
    d.dishid,
    d.name as dish_name,
    d.price,
    o.customerid as customers
from
    dishes d
    right join orders o on d.restaurantid = o.restaurantid;

-- Subqueries
-- 15.Find the name of the customer who gave the lowest rating.
select
    c.name as customer_name,
    r.rating
from
    reviews r
    join customers c on r.customerid = c.customerid
where
    rating = (
        select
            min(rating)
        from
            reviews
    );

-- 16.Retrieve the most expensive dish for each cuisine type.
with max_price as (
    select
        r.cuisine,
        max(d.price) as price
    from
        restaurants r
        join dishes d on r.restaurantid = d.restaurantid
    group by
        r.cuisine
)
select
    r.cuisine,
    d.name as dish_name,
    d.price
from
    restaurants r
    join dishes d on r.restaurantid = d.restaurantid
    join max_price mp on r.cuisine = mp.cuisine
    and d.price = mp.price;

-- Analytical Queries
-- 17.Identify the delivery person with the fastest average delivery time.
with fastest as (
    select
        deliveryperson,
        avg(deliverytime) as time,
        rank() over(
            order by
                avg(deliverytime) asc
        ) as rank
    from
        deliveries
    group by
        deliveryperson
)
select
    deliveryperson,
    time
from
    fastest
where
    rank = 1;

-- 18.Calculate the average delivery time for all orders handled by "Carlos Gonzalez."
select
    avg(deliverytime) as time
from
    deliveries
where
    deliveryperson = 'Carlos Gonzalez';

-- 19.Use a window function to assign a rank to each review based on its date, grouped by customer.
select
    c.name as customer_name,
    r.reviewtext,
    rank() over(
        partition by c.customerid
        order by
            reviewdate asc
    ) as rank
from
    reviews r
    join customers c on r.customerid = c.customerid;

-- Advanced Window Functions
-- 20.Calculate the running total of revenue for orders by each customer.
select
    c.name as customer_name,
    sum(o.totalamount) over(
        partition by c.customerid
        order by
            o.orderid asc
    ) as revenue
from
    orders o
    join customers c on o.customerid = c.customerid;